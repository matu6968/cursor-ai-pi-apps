name: Build and Package Debian App from AppImage

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-package:
    runs-on:
     - runs-on=${{ github.run_id }}
     - runner=2cpu-linux-arm64

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Remove unnecessary files
    - name: Clone Dependencies Repository
      run: |
        rm -f LICENSE README.md

    # Step 3: Download AppImage file
    - name: Download AppImage
      run: |
        APPIMAGE_URL="https://downloader.cursor.sh/linux/appimage/arm64"
        curl -O -J "$APPIMAGE_URL"
        APPIMAGE_FILE=$(ls | grep cursor-.*arm64.AppImage)
        echo "Downloaded: $APPIMAGE_FILE"
        echo "APPIMAGE_FILE=$APPIMAGE_FILE" >> $GITHUB_ENV

    # Step 4: Extract version from AppImage file name
    - name: Extract Version
      run: |
        if [[ "${APPIMAGE_FILE}" =~ cursor-([0-9]+\.[0-9]+\.[0-9]+)arm64.AppImage ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        else
          echo "Could not extract version from file name"
          exit 1
        fi

    # Step 5: Extract AppImage
    # For now use a external tool to extract the appimage file
    # until release and public arm64 runners are available
    - name: Extract AppImage
      run: |
        mkdir squashfs-root
        cd squashfs-root
        7z x "./$APPIMAGE_FILE"
        cd ..

    # Step 6: Copy files to the cloned repository
    - name: Copy Files
      run: |
        mkdir -p usr/share/cursor
        cp -r squashfs-root/* usr/share/cursor
        rm -rf squashfs-root
        rm "$APPIMAGE_FILE"

    # Step 7: Create Debian package
    - name: Create Debian Package
      run: |
        rm DEBIAN/control
        echo "Package: cursor" > DEBIAN/control
        echo "Section: devel" >> DEBIAN/control
        echo "Depends: ca-certificates, libasound2 (>= 1.0.17), libatk-bridge2.0-0 (>= 2.5.3), libatk1.0-0 (>= 2.2.0), libatspi2.0-0 (>= 2.9.90), libc6 (>= 2.17), libcairo2 (>= 1.6.0), libcurl3-gnutls | libcurl3-nss | libcurl4 | libcurl3, libdbus-1-3 (>= 1.9.14), libglib2.0-0 (>= 2.37.3), libgtk-3-0 (>= 3.9.10), libnspr4 (>= 2:4.9-2~), libnss3 (>= 2:3.30), libpango-1.0-0 (>= 1.14.0), libstdc++6 (>= 4.1.1), libx11-6, libxext6, libxrandr2, xdg-utils (>= 1.0.2)" >> DEBIAN/control
        echo "Recommends: libvulkan1" >> DEBIAN/control
        echo "Architecture: arm64" >> DEBIAN/control
        echo "Maintainer: Cursor <hi@cursor.com>" >> DEBIAN/control
        echo "Homepage: https://cursor.com/" >> DEBIAN/control
        echo "Priority: optional" >> DEBIAN/control
        echo "Version: ${VERSION}" >> DEBIAN/control
        echo "Description: AI focused code editor based on Visual Studio Code." >> DEBIAN/control
        chmod 0755 -R usr/share/cursor/*
        chmod 0755 -R DEBIAN/*
        dpkg-deb --build . "cursor_${VERSION}_arm64.deb"
        echo "Generated: cursor_${VERSION}_arm64.deb"
        echo "DEB_FILE=cursor_${VERSION}_arm64.deb" >> $GITHUB_ENV

    # Step 8: Upload Debian package to GitHub Releases
    - name: Upload to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.DEB_FILE }}
        asset_name: cursor_${{ env.VERSION }}_arm64.deb
        asset_content_type: application/vnd.debian.binary-package
